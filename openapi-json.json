{
  "openapi": "3.0.1",
  "info": {
    "title": "IGhe3 API",
    "description": "Restful APIs for IGhe3.",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://dev.api.ighe3.com/v1"
    },
    {
      "url": "https://api.ighe3.com/v1"
    },
    {
      "url": "http://localhost:8080/v1"
    }
  ],
  "paths": {
    "/auth/otp": {
      "post": {
        "summary": "request OTP for mobile",
        "tags": ["Auth", "OTP"],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OtpRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "OTP sent to given mobile number"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/otp/verify": {
      "post": {
        "summary": "verify OTP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OtpVerifyRequest"
              }
            }
          }
        },
        "tags": ["Auth", "OTP"],
        "responses": {
          "200": {
            "description": "Success login",
            "headers": {
              "X-Access-Token": {
                "schema": {
                  "type": "string"
                },
                "description": "access token of logged in user in JWT format"
              },
              "X-Refresh-Token": {
                "schema": {
                  "type": "string"
                },
                "description": "refresh token of logged in user to refresh access token"
              },
              "X-Expires-In": {
                "schema": {
                  "type": "number"
                },
                "description": "expiration time of token in seconds"
              },
              "X-Refresh-Expires-In": {
                "schema": {
                  "type": "number"
                },
                "description": "expiration time of refresh token in seconds"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/password": {
      "post": {
        "summary": "login with password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordLoginRequest"
              }
            }
          }
        },
        "tags": ["Auth", "Password"],
        "responses": {
          "200": {
            "description": "Success login",
            "headers": {
              "X-Access-Token": {
                "schema": {
                  "type": "string"
                },
                "description": "access token of logged in user in JWT format"
              },
              "X-Refresh-Token": {
                "schema": {
                  "type": "string"
                },
                "description": "refresh token of logged in user to refresh access token"
              },
              "X-Expires-In": {
                "schema": {
                  "type": "string"
                },
                "description": "expiration time of token in seconds"
              },
              "X-Refresh-Expires-In": {
                "schema": {
                  "type": "string"
                },
                "description": "expiration time of refresh token in seconds"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/change_password": {
      "post": {
        "summary": "change current password",
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordRequest"
              }
            }
          }
        },
        "tags": ["Auth", "Password"],
        "responses": {
          "200": {
            "description": "Success login",
            "headers": {
              "X-Access-Token": {
                "schema": {
                  "type": "string"
                },
                "description": "access token of logged in user in JWT format"
              },
              "X-Refresh-Token": {
                "schema": {
                  "type": "string"
                },
                "description": "refresh token of logged in user to refresh access token"
              },
              "X-Expires-In": {
                "schema": {
                  "type": "string"
                },
                "description": "expiration time of token in seconds"
              },
              "X-Refresh-Expires-In": {
                "schema": {
                  "type": "string"
                },
                "description": "expiration time of refresh token in seconds"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/auth/refresh": {
      "post": {
        "summary": "verify OTP",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "token": {
                    "type": "string",
                    "description": "refresh token to get new authentication"
                  }
                }
              }
            }
          }
        },
        "tags": ["Auth"],
        "responses": {
          "200": {
            "description": "Success login",
            "headers": {
              "X-Access-Token": {
                "schema": {
                  "type": "string"
                },
                "description": "access token of logged in user in JWT format"
              },
              "X-Refresh-Token": {
                "schema": {
                  "type": "string"
                },
                "description": "refresh token of logged in user to refresh access token"
              },
              "X-Expires-In": {
                "schema": {
                  "type": "number"
                },
                "description": "expiration time of token in seconds"
              },
              "X-Refresh-Expires-In": {
                "schema": {
                  "type": "number"
                },
                "description": "expiration time of refresh token in seconds"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/media/upload": {
      "post": {
        "summary": "Upload a file and get uploaded information",
        "tags": ["Media"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "image/jpeg": {
              "schema": {
                "description": "jpeg image to upload",
                "format": "binary"
              }
            },
            "image/png": {
              "schema": {
                "description": "png image to upload",
                "format": "binary"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Uploaded",
            "content": {
              "application/json": {
                "schema": {
                  "properties": {
                    "relative_url": {
                      "type": "string",
                      "description": "uplpaded relative url of file"
                    },
                    "width": {
                      "type": "integer",
                      "description": "image with(if file type is image)"
                    },
                    "height": {
                      "type": "integer",
                      "description": "image height(if file type is image)"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/media/download/{relative_url}": {
      "get": {
        "summary": "Download existing uploaded file",
        "tags": ["Media"],
        "parameters": [
          {
            "name": "relative_url",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "relative of file which uploaded before"
          },
          {
            "name": "max",
            "in": "query",
            "description": "maximum image size(px width or height) to download, available sizes to download are `32, 64, 120, 240, 320, 460, 720, 1080, 1920, 2048` if you pass any size else, you will download first bigger one available",
            "required": false,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File",
            "content": {
              "multipart/form-data": {
                "schema": {
                  "description": "file to upload",
                  "format": "binary"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/settings/{type}": {
      "post": {
        "summary": "add new setting",
        "description": "for **payment setting**<br> field `after_payment_notification_message` accepts dynamical keywords below<br>*%name* for first name of account<br>*%family_name* for family name of account<br>*%username* for username of account<br>*%price* for putting order price<br><br>Acceptable setting types are<br>- default<br>- app<br>- home<br>- payment",
        "tags": ["Setting"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "schema": {
              "type": "string",
              "default": "default",
              "enum": ["default", "app", "home", "payment"]
            },
            "description": "type of setting (default, app, home, payment)",
            "required": true
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/DefaultSetting"
                  },
                  {
                    "$ref": "#/components/schemas/AppSetting"
                  },
                  {
                    "$ref": "#/components/schemas/HomeSetting"
                  },
                  {
                    "$ref": "#/components/schemas/PaymentSetting"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New setting added",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DefaultSetting"
                    },
                    {
                      "$ref": "#/components/schemas/AppSetting"
                    },
                    {
                      "$ref": "#/components/schemas/HomeSetting"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "get existing setting",
        "tags": ["Setting"],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "default": "default"
            },
            "description": "type of setting (default, app)"
          }
        ],
        "responses": {
          "200": {
            "description": "information of setting",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "$ref": "#/components/schemas/DefaultSetting"
                    },
                    {
                      "$ref": "#/components/schemas/AppSetting"
                    },
                    {
                      "$ref": "#/components/schemas/HomeSetting"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/dashboard": {
      "get": {
        "summary": "get information of dashboard in admin panel",
        "tags": ["Dashboard"],
        "responses": {
          "200": {
            "description": "dashboard information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Dashboard"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/home": {
      "get": {
        "summary": "get information of home",
        "tags": ["Home"],
        "responses": {
          "200": {
            "description": "home information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Home"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/locales": {
      "get": {
        "summary": "get locales in pagination",
        "tags": ["Locale"],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, paginate accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Locale"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/countries": {
      "get": {
        "summary": "get countries in pagination, its actualy like locales API but filtered with type=COUNTRY",
        "tags": ["Locale", "Province"],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, paginated countries",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Locale"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/provinces": {
      "get": {
        "summary": "get provinces in pagination, its actualy like locales API but filtered with type=PROVINCE",
        "tags": ["Locale", "Province"],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, paginated provinces",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Locale"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/avatars": {
      "post": {
        "summary": "add new avatar to avatars, admin required to access this section",
        "tags": ["Avatar"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Avatar"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "New avatar added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Avatar"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "paginate existing avatars",
        "tags": ["Avatar"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "paginated avatars",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Avatar"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/avatars/{id}": {
      "put": {
        "summary": "update existing avatar, admin required to access this section",
        "tags": ["Avatar"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Avatar"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Avatar updated"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "get existing avatar",
        "tags": ["Avatar"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "paginated avatars",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Avatar"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete existing avatar",
        "tags": ["Avatar"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "deleted"
          }
        }
      }
    },
    "/profile": {
      "get": {
        "summary": "get current logged in account's profile",
        "tags": ["Account", "Profile"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "profile information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "update profile",
        "tags": ["Account", "Profile"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/profile/validate": {
      "put": {
        "summary": "like update profile, but only validates request(does not update)",
        "tags": ["Account", "Profile"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "request is valid and update works with same request"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/accounts": {
      "post": {
        "summary": "add new account (role adming required)",
        "tags": ["Account"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "list of accounts with pagination",
        "tags": ["Account"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/q"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Success, paginate accounts",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}": {
      "get": {
        "summary": "get existing account's profile",
        "tags": ["Account"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "profile information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "update existing account",
        "tags": ["Account"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "account id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete existing account",
        "tags": ["Account"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "account id to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}/validate": {
      "put": {
        "summary": "like update account, but only validates request(does not update)",
        "tags": ["Account"],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Account"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "request is valid and update works with same request"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/categories": {
      "post": {
        "summary": "add new category",
        "tags": ["Category"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "list of categories with pagination",
        "tags": ["Category"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Category"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/categories/{id}": {
      "get": {
        "summary": "get existing category info by it's id",
        "tags": ["Category"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "entity id to get information"
          }
        ],
        "responses": {
          "200": {
            "description": "information of entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "update existing category",
        "tags": ["Category"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "entity id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Category"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete existing category",
        "tags": ["Category"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "entity id to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stories": {
      "post": {
        "summary": "add new story",
        "tags": ["Story"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Story"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "get stories in pagination",
        "tags": ["Story"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/q"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Story"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stories/{id}": {
      "get": {
        "summary": "get existing story info by it's id",
        "tags": ["Story"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "entity id to get information"
          }
        ],
        "responses": {
          "200": {
            "description": "information of entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Story"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "update existing entity",
        "tags": ["Story"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "entity id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Story"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete existing story",
        "tags": ["Story"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "entity id to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stories/{id}/similar_stories": {
      "get": {
        "summary": "get similar stories in pagination",
        "tags": ["Story"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated similar stories related to given story having given id of URL",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Story"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contents": {
      "post": {
        "summary": "add new content",
        "tags": ["Content"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Content"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Content"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "list of contents with pagination",
        "tags": ["Content"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated result",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Content"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/contents/{id}": {
      "get": {
        "summary": "get existing content info by it's id",
        "tags": ["Content"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "entity id to get information"
          }
        ],
        "responses": {
          "200": {
            "description": "information of entity",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Content"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "update existing content",
        "tags": ["Content"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "entity id to update"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Story"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Updated"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete existing content",
        "tags": ["Content"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "entity id to delete"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stories/{id}/content": {
      "post": {
        "summary": "assign content to story",
        "tags": ["StoryContent"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Content"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Content"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "story content",
        "tags": ["StoryContent"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated result",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Content"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stories/{id}/view": {
      "post": {
        "summary": "set current user viewed this story",
        "tags": ["View"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "201": {
            "description": "Viewed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/View"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/views": {
      "get": {
        "summary": "paginate views of account in pagination",
        "tags": ["View"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "201": {
            "description": "views of account in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/View"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/viewed_stories": {
      "get": {
        "summary": "paginate viewed stories of account in pagination",
        "tags": ["View"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "201": {
            "description": "viewed stories of account in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Story"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}/viewed_stories": {
      "get": {
        "summary": "paginate viewed stories of specific account in pagination",
        "tags": ["View"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "201": {
            "description": "viewed stories of account in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Story"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stories/{id}/like": {
      "post": {
        "summary": "like story",
        "tags": ["Like"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "201": {
            "description": "Liked",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Like"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "dislike story",
        "tags": ["Like"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "Like removed"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stories/{id}/likes": {
      "get": {
        "summary": "get likes of story in pagination",
        "tags": ["Like"],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Likes in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}/follow": {
      "post": {
        "summary": "follow account",
        "tags": ["Follow"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "201": {
            "description": "Followed",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Follow"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "unfollow account",
        "tags": ["Follow"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "unfollowed"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}/followers": {
      "get": {
        "summary": "paginate followers of account",
        "tags": ["Follow"],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "201": {
            "description": "followers of account in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}/followings": {
      "get": {
        "summary": "paginate followings of account",
        "tags": ["Follow"],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "201": {
            "description": "followings of account in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/profile/followers": {
      "get": {
        "summary": "paginate followers of current account",
        "tags": ["Follow"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "201": {
            "description": "followers of account in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/profile/followings": {
      "get": {
        "summary": "paginate followings of current account",
        "tags": ["Follow"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "201": {
            "description": "followings of current account in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/comments": {
      "get": {
        "summary": "get comments in pagination, admin required to access this section",
        "tags": ["Comment"],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Comments in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comment"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/comments/{comment_id}": {
      "get": {
        "summary": "get existing comment",
        "tags": ["Comment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "id of comment"
          }
        ],
        "responses": {
          "200": {
            "description": "Comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "update existing comment, must be admin or owner of comment(who posted the comment)",
        "tags": ["Comment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "id of comment"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Comment updated"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete existing comment, must be admin or owner of comment(who posted the comment)",
        "tags": ["Comment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "id of comment"
          }
        ],
        "responses": {
          "201": {
            "description": "Comment posted, for admin automatically verifies the comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stories/{id}/comments": {
      "post": {
        "summary": "add comment to story",
        "tags": ["Comment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Comment posted, for admin automatically verifies the comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "get comments of story in pagination",
        "tags": ["Comment"],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Comments in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Comment"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stories/{id}/comments/{comment_id}": {
      "put": {
        "summary": "update existing comment of story, must be admin or owner of comment(who posted the comment)",
        "tags": ["Comment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "id of comment"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Comment"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Comment updated"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "delete existing comment, must be admin or owner of comment(who posted the comment)",
        "tags": ["Comment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "in": "path",
            "name": "comment_id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "id of comment"
          }
        ],
        "responses": {
          "201": {
            "description": "Comment posted, for admin automatically verifies the comment",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Comment"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/stories/{id}/favorite": {
      "post": {
        "summary": "mark story as favorite",
        "tags": ["Favorite"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "201": {
            "description": "Story added to favorites",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Favorite"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "remove favorited story from list",
        "tags": ["Favorite"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "Favorite removed"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/favorites": {
      "get": {
        "summary": "get favorites in pagination",
        "description": "depending on ref_type related object will be responded, for example if ref_type is `STORY`, information of story will be filled in key of `story`",
        "tags": ["Favorite"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Comments in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Favorite"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/favorite_stories": {
      "get": {
        "summary": "get favorited stories in pagination",
        "tags": ["Favorite"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite stories in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Story"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/accounts/{id}/favorite_stories": {
      "get": {
        "summary": "get favorited stories of specific account in pagination",
        "tags": ["Favorite"],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Favorite stories in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Story"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/friends": {
      "get": {
        "summary": "paginate friends",
        "description": "to search between friends pass query `q` in url. <br/>Query of `filters` only works as exact match filter in this API",
        "tags": ["Friend"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/q"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Friends in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/versions": {
      "post": {
        "summary": "add new version(admin required)",
        "tags": ["Version"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Version"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Version added",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "paginate versions(admin required)",
        "tags": ["Version"],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Versions in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Version"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/versions/{id}": {
      "get": {
        "summary": "Get existing version by id(admin required)",
        "tags": ["Version"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "201": {
            "description": "Version info",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update existing version",
        "tags": ["Version"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Version"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Version updated"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete existing version",
        "tags": ["Version"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/update/check": {
      "post": {
        "summary": "Check for updates according to given version info of current application",
        "tags": ["Version"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Version"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "New version available, gives information of new version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Version"
                }
              }
            }
          },
          "204": {
            "description": "No update available(application is update)"
          },
          "404": {
            "description": "Version not found to check for newer one",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/search": {
      "get": {
        "summary": "search everything available, query for all required entities. account, story, category will be searched for now",
        "tags": ["Suggestion"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/q"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "paginated suggestion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Suggestion"
                }
              }
            }
          }
        }
      }
    },
    "/suggestions": {
      "get": {
        "summary": "paginate suggestions, query for all required entities. account, story, category will be searched for now",
        "tags": ["Suggestion"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/q"
          },
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Paginated suggestion",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Suggestion"
                }
              }
            }
          }
        }
      }
    },
    "/plans": {
      "post": {
        "summary": "Create new plan(admin required)",
        "tags": ["Plan"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Plan"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Plan created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "paginate plans",
        "tags": ["Plan"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Plans in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Plan"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/plans/{id}": {
      "get": {
        "summary": "Get single plan information",
        "tags": ["Plan"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Plan information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Plan"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update existing plan",
        "tags": ["Plan"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Plan"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Plan updated"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete existing plan",
        "tags": ["Plan"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "204": {
            "description": "Deleted"
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders": {
      "post": {
        "summary": "Create new order",
        "tags": ["Payment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Order created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "paginate orders(admin required)",
        "tags": ["Payment", "Order"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Orders in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/my_orders": {
      "get": {
        "summary": "paginate orders of current account",
        "tags": ["Payment", "Order"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/filters"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page"
          },
          {
            "$ref": "#/components/parameters/per_page"
          }
        ],
        "responses": {
          "200": {
            "description": "Orders in pagination",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "items": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    },
                    "pagination": {
                      "$ref": "#/components/schemas/Pagination"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/orders/{id}": {
      "get": {
        "summary": "Get single order information",
        "tags": ["Payment", "Order"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Order information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment/init": {
      "post": {
        "summary": "Initialize payment for specific order",
        "tags": ["Payment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "order_id": {
                    "type": "string",
                    "description": "order id to initialize payment for"
                  },
                  "gateway_type": {
                    "type": "string",
                    "description": "type of selected gateway",
                    "enum": ["CREDIT", "IPG"]
                  },
                  "callback_url": {
                    "type": "string",
                    "description": "callback url after payment gateway"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Initialized order information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InitPay"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/payment/verify": {
      "post": {
        "summary": "Verify payment for specific order",
        "tags": ["Payment"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "properties": {
                  "order_id": {
                    "type": "string",
                    "description": "order id to verify payment of order"
                  },
                  "transaction_id": {
                    "type": "integer",
                    "description": "id of related transaction of order"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Verified order information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VerifyPay"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/premium": {
      "post": {
        "summary": "Make specific account premium",
        "tags": ["Premium"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PremiumRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Premium plan successfully extended",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PremiumResponse"
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/device-token": {
      "post": {
        "summary": "set device token",
        "tags": ["Notification"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeviceToken"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Device token has successfully added"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/notifications/send": {
      "post": {
        "summary": "send notifications to accounts with specified filters. access to this sections requires role of admin",
        "tags": ["Notification"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationRequest"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Notification has been committed to run in background"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/logout": {
      "post": {
        "summary": "request for logout to remove saved unnecessary information of user",
        "tags": ["Logout", "Notification"],
        "security": [
          {
            "BearerAuth": []
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Logout"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Device token has successfully added"
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "parameters": {
      "id": {
        "name": "id",
        "in": "path",
        "required": true,
        "schema": {
          "type": "string"
        },
        "description": "entity id"
      },
      "page": {
        "name": "page",
        "in": "query",
        "schema": {
          "type": "integer"
        },
        "description": "page number"
      },
      "per_page": {
        "name": "per_page",
        "in": "query",
        "schema": {
          "type": "integer"
        },
        "description": "count of items in each page"
      },
      "filters": {
        "name": "filters",
        "in": "query",
        "schema": {
          "type": "string",
          "description": "{\"some_field\": {\"$ne\": \"some_value\"}}"
        },
        "description": "filter result"
      },
      "sort": {
        "name": "sort",
        "in": "query",
        "schema": {
          "type": "string",
          "default": "-created_at"
        },
        "description": "sort items seprated by comma, `-` before of name sorts as descending"
      },
      "q": {
        "name": "q",
        "in": "query",
        "schema": {
          "type": "string"
        },
        "description": "query by a keyword, searches automatically between related fields which is chosen in server side application depend on entity type. similar to filters={\"$or\"':'[{\"key\"':' q}, {\"key2\"':' q}, ...]}"
      }
    },
    "schemas": {
      "BaseModel": {
        "properties": {
          "id": {
            "type": "string",
            "description": "id of entity",
            "readOnly": true
          },
          "created_at": {
            "type": "string",
            "readOnly": true,
            "format": "datetime",
            "description": "time of creation"
          },
          "updated_at": {
            "type": "string",
            "readOnly": true,
            "format": "datetime",
            "description": "time of latest update"
          },
          "order": {
            "type": "integer",
            "description": "order of entity, can sort with order if needed"
          },
          "enabled": {
            "type": "boolean",
            "description": "flag determines object is enabled or not"
          }
        }
      },
      "OtpRequest": {
        "properties": {
          "mobile": {
            "type": "string",
            "description": "mobile to send OTP, it wont be required to pass in request if key_type and key is filled"
          },
          "key_type": {
            "type": "string",
            "description": "type of key(e.g. MOBILE,EMAIL or PASSWORD)"
          },
          "key": {
            "type": "string",
            "description": "key of request OTP for, for example it would be `email address` if key_type is `EMAIL`"
          }
        }
      },
      "OtpVerifyRequest": {
        "properties": {
          "mobile": {
            "type": "string",
            "description": "mobile to send OTP, it wont be required to pass in request if key_type and key is filled"
          },
          "key_type": {
            "type": "string",
            "description": "type of key(e.g. MOBILE,EMAIL or PASSWORD)"
          },
          "key": {
            "type": "string",
            "description": "key of request OTP for, for example it would be `email address` if key_type is `EMAIL`"
          },
          "code": {
            "type": "string",
            "description": "verification code"
          },
          "include_roles": {
            "type": "boolean",
            "description": "if true, includes roles of account in authentication response"
          }
        }
      },
      "PasswordLoginRequest": {
        "properties": {
          "key": {
            "type": "string",
            "description": "key to login (username)"
          },
          "pass": {
            "type": "string",
            "description": "password of key"
          },
          "include_roles": {
            "type": "boolean",
            "description": "if true, includes roles of account in authentication response"
          }
        }
      },
      "ChangePasswordRequest": {
        "properties": {
          "current": {
            "type": "string",
            "description": "current password of current account"
          },
          "new": {
            "type": "string",
            "description": "new password to change current passowrd",
            "pattern": "\\.{6,}"
          }
        }
      },
      "AuthResponse": {
        "properties": {
          "access_token": {
            "type": "string",
            "description": "access token of authentication"
          },
          "refresh_token": {
            "type": "string",
            "description": "refresh token of authentication to refresh access token"
          },
          "expires_in": {
            "type": "integer",
            "description": "expiration of access token in seconds"
          },
          "refresh_expires_in": {
            "type": "integer",
            "description": "expiration of refresh token in seconds"
          },
          "is_new": {
            "type": "boolean",
            "description": "true if account is new(just created)"
          },
          "profile": {
            "$ref": "#/components/schemas/Account"
          }
        }
      },
      "Medium": {
        "description": "medium info",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "type of media, can be IMAGE, VIDEO, ..."
              },
              "path": {
                "type": "string",
                "description": "file path"
              },
              "duration": {
                "type": "integer",
                "description": "duration of media in seconds useful when type is video or music and etc."
              },
              "default": {
                "type": "boolean",
                "description": "is default or not, in server side this flag will only be true for first item. rest items will be set null if is true"
              },
              "width": {
                "type": "integer",
                "description": "width if image(if is image)"
              },
              "height": {
                "type": "integer",
                "description": "height if image(if is image)"
              },
              "alt": {
                "type": "string",
                "description": "alt of media"
              }
            }
          }
        ]
      },
      "Avatar": {
        "description": "avatar info",
        "allOf": [
          {
            "$ref": "#/components/schemas/Medium"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "name of avatar"
              }
            }
          }
        ]
      },
      "DefaultSetting": {
        "description": "default setting",
        "properties": {
          "a": {
            "type": "string",
            "description": "for test now"
          }
        }
      },
      "AppSetting": {
        "description": "app setting",
        "properties": {
          "b": {
            "type": "string",
            "description": "for test now"
          }
        }
      },
      "PaymentSetting": {
        "description": "payment setting",
        "properties": {
          "send_notification_after_payment": {
            "type": "boolean",
            "description": "flag detetrmines if service should send notification after payment or not"
          },
          "after_payment_notification_message": {
            "type": "boolean",
            "description": "message content",
            "default": "hello %name, your order has successfully been paid with price of %price"
          }
        }
      },
      "Home": {
        "description": "home page info and setting",
        "properties": {
          "random_profiles": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "special_categories": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "daily_stories": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Story"
            }
          },
          "special_stories": {
            "type": "array",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Story"
            }
          },
          "special_story": {
            "$ref": "#/components/schemas/Story"
          },
          "special_story_id": {
            "type": "string",
            "description": "id of special story"
          },
          "banners": {
            "type": "array",
            "description": "banners of home",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id of entity if refrenced to entity"
                },
                "type": {
                  "type": "string",
                  "description": "type of banner, STORY, CATEGORY, BLOG"
                },
                "image": {
                  "$ref": "#/components/schemas/Medium"
                },
                "url": {
                  "type": "string",
                  "description": "url of banner if refrenced to web page"
                }
              }
            }
          },
          "banners1": {
            "type": "array",
            "description": "banners of home",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id of entity if refrenced to entity"
                },
                "type": {
                  "type": "string",
                  "description": "type of banner, STORY, CATEGORY, BLOG"
                },
                "image": {
                  "$ref": "#/components/schemas/Medium"
                },
                "url": {
                  "type": "string",
                  "description": "url of banner if refrenced to web page"
                }
              }
            }
          },
          "banner1": {
            "type": "array",
            "description": "banners of home",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id of entity if refrenced to entity"
                },
                "type": {
                  "type": "string",
                  "description": "type of banner, STORY, CATEGORY, BLOG"
                },
                "image": {
                  "$ref": "#/components/schemas/Medium"
                },
                "url": {
                  "type": "string",
                  "description": "url of banner if refrenced to web page"
                }
              }
            }
          },
          "banners2": {
            "type": "array",
            "description": "banners of home",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id of entity if refrenced to entity"
                },
                "type": {
                  "type": "string",
                  "description": "type of banner, STORY, CATEGORY, BLOG"
                },
                "image": {
                  "$ref": "#/components/schemas/Medium"
                },
                "url": {
                  "type": "string",
                  "description": "url of banner if refrenced to web page"
                }
              }
            }
          },
          "banner2": {
            "type": "array",
            "description": "banners of home",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id of entity if refrenced to entity"
                },
                "type": {
                  "type": "string",
                  "description": "type of banner, STORY, CATEGORY, BLOG"
                },
                "image": {
                  "$ref": "#/components/schemas/Medium"
                },
                "url": {
                  "type": "string",
                  "description": "url of banner if refrenced to web page"
                }
              }
            }
          },
          "banners3": {
            "type": "array",
            "description": "banners of home",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id of entity if refrenced to entity"
                },
                "type": {
                  "type": "string",
                  "description": "type of banner, STORY, CATEGORY, BLOG"
                },
                "image": {
                  "$ref": "#/components/schemas/Medium"
                },
                "url": {
                  "type": "string",
                  "description": "url of banner if refrenced to web page"
                }
              }
            }
          },
          "suggest_banners": {
            "type": "array",
            "description": "banners of home",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "id of entity if refrenced to entity"
                },
                "type": {
                  "type": "string",
                  "description": "type of banner, STORY, CATEGORY, BLOG"
                },
                "image": {
                  "$ref": "#/components/schemas/Medium"
                },
                "url": {
                  "type": "string",
                  "description": "url of banner if refrenced to web page"
                }
              }
            }
          }
        }
      },
      "HomeSetting": {
        "allOf": [
          {
            "$ref": "#/components/schemas/Home"
          },
          {
            "type": "object",
            "properties": {
              "random_profiles": {
                "type": "boolean",
                "description": "load random profiles or sort by order"
              },
              "random_special_categories": {
                "type": "boolean",
                "description": "load random special categories or sort by order"
              },
              "random_daily_stories": {
                "type": "boolean",
                "description": "load random daily stories or sort by order"
              },
              "random_special_stories": {
                "type": "boolean",
                "description": "load random special stories or sort by order"
              }
            }
          }
        ]
      },
      "Setting": {
        "properties": {
          "type": {
            "type": "string",
            "description": "setting type (default, app)"
          },
          "default": {
            "$ref": "#/components/schemas/DefaultSetting"
          },
          "app": {
            "$ref": "#/components/schemas/AppSetting"
          },
          "home": {
            "$ref": "#/components/schemas/HomeSetting"
          }
        }
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "total": {
            "type": "integer",
            "description": "total count of items"
          },
          "per_page": {
            "type": "integer",
            "description": "number of result per page",
            "default": 30
          },
          "pages": {
            "type": "integer",
            "description": "total number of pages",
            "default": 0
          },
          "page": {
            "type": "integer",
            "description": "current page number",
            "default": 1
          },
          "has_next": {
            "type": "boolean",
            "description": "has next page or not, if false will be omitted",
            "default": false
          }
        }
      },
      "Locale": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "type of locale(e.g. COUNTRY, PRIVINCE)",
                "enum": ["COUNTRY", "PRIVINCE"]
              },
              "country_code": {
                "type": "string",
                "description": "code of related country"
              },
              "code": {
                "type": "string",
                "description": "code of locale"
              },
              "name": {
                "type": "string",
                "description": "name of locale"
              },
              "en_name": {
                "type": "string",
                "description": "english name of locale"
              },
              "iso_code2": {
                "type": "string",
                "description": "iso code of locale in 2 characters"
              },
              "iso_code3": {
                "type": "string",
                "description": "iso code of locale in 3 characters"
              },
              "latitude": {
                "type": "number",
                "description": "latitude of province"
              },
              "longitude": {
                "type": "number",
                "description": "longitude of province"
              }
            }
          }
        ]
      },
      "Account": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "type of account, admin can edit only",
                "enum": ["USER", "CHARACTER"]
              },
              "name": {
                "type": "string",
                "description": "name of account"
              },
              "family_name": {
                "type": "string",
                "description": "family name of account"
              },
              "username": {
                "type": "string",
                "description": "username of account"
              },
              "mobile": {
                "type": "string",
                "description": "mobile number of account"
              },
              "email": {
                "type": "string",
                "description": "email of account"
              },
              "profile_picture": {
                "$ref": "#/components/schemas/Medium"
              },
              "created_at": {
                "type": "string",
                "format": "date",
                "description": "time of first login(which is creation date)"
              },
              "updated_at": {
                "type": "string",
                "format": "date",
                "description": "time of last modify(last login will update this field)"
              },
              "last_login": {
                "type": "string",
                "format": "date",
                "description": "time of last login"
              },
              "avatar_id": {
                "type": "string",
                "description": "id of avatar"
              },
              "roles": {
                "type": "array",
                "description": "roles of account",
                "items": {
                  "type": "string"
                }
              },
              "password_secured": {
                "type": "boolean",
                "description": "if any password set for account or not",
                "readOnly": true
              },
              "birth_date": {
                "type": "string",
                "format": "date"
              },
              "summary": {
                "type": "string",
                "description": "summary description of account"
              },
              "country_id": {
                "type": "string",
                "description": "id of country"
              },
              "province_id": {
                "type": "string",
                "description": "id of province"
              },
              "country": {
                "readOnly": true,
                "description": "country of account",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Locale"
                  }
                ]
              },
              "province": {
                "readOnly": true,
                "description": "province of account",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Locale"
                  }
                ]
              },
              "is_following": {
                "type": "boolean",
                "readOnly": true,
                "description": "is current logged in account following this account or not"
              },
              "total_followers_count": {
                "type": "integer",
                "readOnly": true,
                "description": "total followers count of account"
              },
              "total_followings_coings": {
                "type": "integer",
                "readOnly": true,
                "description": "total followings count of account"
              },
              "premium_until": {
                "type": "string",
                "format": "date",
                "description": "date determines expiration time of premium plan"
              },
              "is_premium": {
                "type": "boolean",
                "description": "determines if has premium plan or not"
              },
              "balance": {
                "type": "integer",
                "readOnly": true,
                "description": "current credit balance of account"
              }
            }
          }
        ]
      },
      "Category": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "title of category"
              },
              "description": {
                "type": "string",
                "description": "description of category"
              },
              "is_special": {
                "type": "boolean",
                "description": "is special or not"
              },
              "background_color": {
                "type": "string",
                "description": "background color of entity for front-end style"
              },
              "banner": {
                "$ref": "#/components/schemas/Medium"
              },
              "stories_count": {
                "type": "integer",
                "description": "number of stories having this category",
                "readOnly": true
              }
            }
          }
        ]
      },
      "Share": {
        "type": "object",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "id of account associated to share object"
          },
          "percentage": {
            "type": "number",
            "description": "share percentage of account"
          },
          "account": {
            "type": "object",
            "description": "account information of share",
            "readOnly": true,
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          }
        }
      },
      "Story": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "name of story"
              },
              "title": {
                "type": "string",
                "description": "title of story"
              },
              "description": {
                "type": "string",
                "description": "description of story"
              },
              "synopsis": {
                "type": "string",
                "description": "synopsis of story"
              },
              "gallery": {
                "type": "array",
                "description": "list of objects containing media info",
                "items": {
                  "$ref": "#/components/schemas/Medium"
                }
              },
              "banner": {
                "$ref": "#/components/schemas/Medium"
              },
              "media": {
                "type": "array",
                "description": "list of objects containing media info",
                "items": {
                  "$ref": "#/components/schemas/Medium"
                }
              },
              "videos": {
                "type": "array",
                "description": "list of video objects containing media info of video",
                "items": {
                  "$ref": "#/components/schemas/Medium"
                }
              },
              "has_video": {
                "type": "boolean",
                "readOnly": true,
                "description": "readonly field determines that story has any video or not"
              },
              "duration": {
                "type": "integer",
                "description": "total duration of media in seconds"
              },
              "publish_date": {
                "type": "string",
                "format": "date",
                "description": "date of publish"
              },
              "genders": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              },
              "min_age": {
                "type": "integer",
                "description": "minimum age of users for story"
              },
              "max_age": {
                "type": "integer",
                "description": "maximum age of users for story"
              },
              "category_ids": {
                "type": "array",
                "description": "list of category id",
                "items": {
                  "type": "string"
                }
              },
              "categories": {
                "type": "array",
                "description": "list of categories",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Category"
                }
              },
              "is_special": {
                "type": "boolean",
                "description": "is special or not"
              },
              "for_days": {
                "type": "array",
                "description": "which days are this story chosen for",
                "items": {
                  "type": "string",
                  "format": "date"
                }
              },
              "background_color": {
                "type": "string",
                "description": "background color of entity for front-end style"
              },
              "author_ids": {
                "type": "array",
                "description": "id of authors account",
                "items": {
                  "type": "string"
                }
              },
              "illustrator_ids": {
                "type": "array",
                "description": "id of illustrators account",
                "items": {
                  "type": "string"
                }
              },
              "narrator_ids": {
                "type": "array",
                "description": "id of narrators account",
                "items": {
                  "type": "string"
                }
              },
              "character_ids": {
                "type": "array",
                "description": "id of characters",
                "items": {
                  "type": "string"
                }
              },
              "authors": {
                "type": "array",
                "description": "list of authors",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "illustrators": {
                "type": "array",
                "description": "list of illustrators",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "narrators": {
                "type": "array",
                "description": "list of narrators",
                "readOnly": true,
                "items": {
                  "$ref": "#/components/schemas/Account"
                }
              },
              "total_likes_count": {
                "type": "integer",
                "readOnly": true,
                "description": "maximum age of users for story"
              },
              "total_views_count": {
                "type": "integer",
                "readOnly": true,
                "description": "maximum age of users for story"
              },
              "shares": {
                "type": "array",
                "description": "shares of story, list of accounts who share the income of story. only admin can read/write",
                "items": {
                  "$ref": "#/components/schemas/Share"
                }
              }
            }
          }
        ]
      },
      "Section": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "type of section"
              },
              "medium": {
                "$ref": "#/components/schemas/Medium"
              },
              "HTML": {
                "type": "string",
                "description": "html of section"
              }
            }
          }
        ]
      },
      "Content": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "owner_type": {
                "type": "string",
                "description": "owner type of content"
              },
              "owner_id": {
                "type": "string",
                "description": "owner id of content"
              },
              "name": {
                "type": "string",
                "description": "name of content"
              },
              "sections": {
                "type": "array",
                "description": "sections of content",
                "items": {
                  "$ref": "#/components/schemas/Section"
                }
              },
              "story": {
                "readOnly": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Story"
                  }
                ]
              }
            }
          }
        ]
      },
      "View": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "ref_type": {
                "type": "string",
                "description": "owner type of content"
              },
              "ref_id": {
                "type": "string",
                "description": "owner id of content"
              },
              "story": {
                "description": "information of story if ref_type=STORY",
                "readOnly": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Story"
                  }
                ]
              }
            }
          }
        ]
      },
      "Like": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "ref_type": {
                "type": "string",
                "description": "owner type of content"
              },
              "ref_id": {
                "type": "string",
                "description": "owner id of content"
              }
            }
          }
        ]
      },
      "Follow": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "ref_type": {
                "type": "string",
                "description": "owner type of content"
              },
              "origin_account_id": {
                "type": "string",
                "description": "id of follower"
              },
              "destination_account_id": {
                "type": "string",
                "description": "id of following"
              }
            }
          }
        ]
      },
      "Comment": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "ref_type": {
                "type": "string",
                "description": "owner type of content",
                "readOnly": true
              },
              "ref_id": {
                "type": "string",
                "description": "owner id of content",
                "readOnly": true
              },
              "account_id": {
                "type": "string",
                "description": "id of account who posted the comment",
                "readOnly": true
              },
              "content": {
                "type": "string",
                "description": "content of comment"
              },
              "is_verified": {
                "type": "boolean",
                "description": "is comment verified or not"
              },
              "account": {
                "readOnly": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Account"
                  }
                ]
              }
            }
          }
        ]
      },
      "Favorite": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "ref_type": {
                "type": "string",
                "description": "owner type of content"
              },
              "ref_id": {
                "type": "string",
                "description": "id of reference"
              },
              "story": {
                "description": "information of story if ref_type=STORY",
                "readOnly": true,
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Story"
                  }
                ]
              }
            }
          }
        ]
      },
      "Version": {
        "description": "version info",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "os": {
                "type": "string",
                "description": "type of operation system"
              },
              "min_os_version": {
                "type": "number",
                "format": "float64",
                "description": "minimum version of OS"
              },
              "version_no": {
                "type": "string",
                "format": "int64",
                "description": "version number"
              },
              "version_no_str": {
                "type": "string",
                "description": "version number in string format. value would be `1.0.2` and version_no would be 102"
              },
              "force_update": {
                "type": "boolean",
                "description": "should force to update or not"
              },
              "web_url": {
                "type": "string",
                "description": "url of application version for web"
              },
              "android_url": {
                "type": "string",
                "description": "url of application version for android"
              },
              "features": {
                "type": "array",
                "description": "features of version",
                "items": {
                  "type": "string"
                }
              },
              "os_version": {
                "type": "number",
                "format": "float64",
                "description": "current version of OS, used for check, does not affect database"
              }
            }
          }
        ]
      },
      "DashboardCounts": {
        "description": "dashboard countable info",
        "properties": {
          "total": {
            "type": "integer"
          }
        }
      },
      "DashboardDayCount": {
        "description": "dashboard countable per day info",
        "properties": {
          "date": {
            "type": "string"
          },
          "total": {
            "type": "integer"
          }
        }
      },
      "Dashboard": {
        "description": "dashboard info",
        "properties": {
          "categories": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DashboardCounts"
              }
            ]
          },
          "stories": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DashboardCounts"
              },
              {
                "type": "object",
                "properties": {
                  "counts": {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/DashboardDayCount"
                    }
                  }
                }
              }
            ]
          },
          "accounts": {
            "allOf": [
              {
                "$ref": "#/components/schemas/DashboardCounts"
              },
              {
                "type": "object",
                "properties": {
                  "roles": {
                    "type": "object",
                    "description": "hash map object(dictionary) role as key count as value",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                }
              }
            ],
            "example": {
              "roles": {
                "admin": 10,
                "author": 100,
                "narrator": 75,
                "illustrator": 85
              }
            }
          },
          "comments": {
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "total_pending_count": {
                    "type": "integer",
                    "description": "total count of comments which is not checked yet(set flag is_verifield=true/false)"
                  }
                }
              }
            ]
          }
        }
      },
      "Suggestion": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "ref_type": {
                "type": "string",
                "description": "type of refrenced object, would be one of `ACCOUNT`, `STORY`, `CATEGORY`, `LOCALE`"
              },
              "ref_id": {
                "type": "string",
                "description": "id of refrence"
              },
              "title": {
                "type": "string",
                "description": "title of entity"
              },
              "description": {
                "type": "string",
                "description": "description of entity"
              },
              "image": {
                "type": "object",
                "description": "image of entity",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Medium"
                  }
                ]
              },
              "extra_info": {
                "oneOf": [
                  {
                    "$ref": "#/components/schemas/Account"
                  },
                  {
                    "$ref": "#/components/schemas/Story"
                  },
                  {
                    "$ref": "#/components/schemas/Category"
                  },
                  {
                    "$ref": "#/components/schemas/Locale"
                  }
                ]
              }
            }
          }
        ]
      },
      "Plan": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "title": {
                "type": "string",
                "description": "title of plan"
              },
              "days_count": {
                "type": "integer",
                "description": "days count of plan"
              },
              "price": {
                "type": "integer",
                "description": "price of plan(admin can modify this field)"
              },
              "discount_percent": {
                "type": "number",
                "format": "decimal",
                "description": "discount percent of plan(admin can modify this field)"
              },
              "discount_price": {
                "type": "integer",
                "description": "discount price of plan(admin can modify this field)"
              }
            }
          }
        ]
      },
      "Product": {
        "anyOf": [
          {
            "$ref": "#/components/schemas/Plan"
          }
        ]
      },
      "CartItem": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "type": {
                "type": "string",
                "description": "type of cart item",
                "enum": ["CHARGE", "PLAN"]
              },
              "product_id": {
                "type": "string",
                "description": "id of product"
              },
              "price": {
                "type": "integer",
                "description": "price of cart item without any discounts"
              },
              "discount_percent": {
                "type": "number",
                "format": "float",
                "readOnly": true,
                "description": "discount percent of cart item"
              },
              "discount_price": {
                "type": "integer",
                "readOnly": true,
                "description": "discount price of cart item"
              },
              "final_price": {
                "type": "integer",
                "readOnly": true,
                "description": "final price of cart item after discounts for final payment"
              },
              "product": {
                "readOnly": true,
                "description": "product information",
                "allOf": [
                  {
                    "$ref": "#/components/schemas/Product"
                  }
                ]
              },
              "extra_info": {
                "anyOf": [
                  {
                    "type": "object",
                    "description": "if cart item type=PLAN",
                    "properties": {
                      "days_count": {
                        "type": "integer",
                        "description": "days count of plan"
                      },
                      "start_time": {
                        "type": "string",
                        "format": "date",
                        "description": "start time of plan, it may be after a while if account already has a plan using. it would be expiration time of latest using plan"
                      },
                      "expiration_time": {
                        "type": "string",
                        "format": "date",
                        "description": "expiration time of plan according to start time"
                      }
                    }
                  }
                ]
              }
            }
          }
        ]
      },
      "Order": {
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "order_id": {
                "type": "string",
                "readOnly": true,
                "description": "string id of order"
              },
              "account_id": {
                "type": "string",
                "readOnly": true,
                "description": "id of applicant"
              },
              "price": {
                "type": "integer",
                "readOnly": true,
                "description": "price of cart item without any discounts"
              },
              "discount_price": {
                "type": "integer",
                "readOnly": true,
                "description": "discount price of cart item"
              },
              "final_price": {
                "type": "integer",
                "readOnly": true,
                "description": "final price of order after discounts for final payment"
              },
              "is_paid": {
                "type": "boolean",
                "readOnly": true,
                "description": "determines of order has been paid or not"
              },
              "cart": {
                "type": "array",
                "items": {
                  "$ref": "#/components/schemas/CartItem"
                }
              }
            }
          }
        ]
      },
      "Transaction": {
        "description": "order transaction information",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "gateway_type": {
                "type": "string",
                "description": "type of gateway",
                "enum": ["CREDIT", "BANK"]
              },
              "price": {
                "type": "integer",
                "description": "price of payment"
              },
              "is_paid": {
                "type": "boolean",
                "description": "determines if has successfully been paid or not"
              },
              "verify_date": {
                "type": "string",
                "format": "date",
                "description": "order verify date"
              }
            }
          }
        ]
      },
      "BasePay": {
        "description": "base pay information",
        "allOf": [
          {
            "$ref": "#/components/schemas/BaseModel"
          },
          {
            "type": "object",
            "properties": {
              "order_id": {
                "type": "string",
                "description": "string id of order"
              },
              "order": {
                "$ref": "#/components/schemas/Order"
              },
              "transaction": {
                "$ref": "#/components/schemas/Transaction"
              }
            }
          }
        ]
      },
      "InitPay": {
        "description": "Order initial payment information",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePay"
          },
          {
            "type": "object",
            "properties": {
              "requires_verify": {
                "type": "boolean",
                "description": "requires verify payment after payment"
              },
              "url": {
                "type": "string",
                "description": "url of gateway to make the payment"
              },
              "gateway": {
                "type": "object",
                "description": "various types according to type of gateway",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "type of gateway",
                    "enum": ["CREDIT", "IPG"]
                  },
                  "url": {
                    "type": "string",
                    "description": "url of gateway"
                  }
                }
              }
            }
          }
        ]
      },
      "VerifyPay": {
        "description": "Order verification information",
        "allOf": [
          {
            "$ref": "#/components/schemas/BasePay"
          },
          {
            "type": "object",
            "properties": {
              "order_id": {
                "type": "string",
                "description": "id of order"
              },
              "transaction_id": {
                "type": "integer",
                "description": "id of transaction"
              }
            }
          }
        ]
      },
      "PremiumRequest": {
        "description": "Premium request information",
        "properties": {
          "account_id": {
            "type": "string",
            "description": "id of user"
          },
          "days": {
            "type": "integer",
            "description": "number of days to increase premium account"
          }
        }
      },
      "PremiumResponse": {
        "description": "Premium response information",
        "properties": {
          "premium_until": {
            "type": "string",
            "format": "datetime",
            "description": "premium expiration time"
          }
        }
      },
      "DeviceToken": {
        "description": "Device token information",
        "properties": {
          "token": {
            "type": "string",
            "description": "device token to set to receive notifications"
          }
        }
      },
      "NotificationRequest": {
        "description": "request body for sending notification",
        "properties": {
          "filters": {
            "type": "object",
            "description": "filter to query accounts to send notification to"
          },
          "message": {
            "description": "message inormation for notification to send to clients",
            "properties": {
              "notification": {
                "description": "notification information which client sees in notification section of device",
                "properties": {
                  "title": {
                    "description": "title of notification",
                    "type": "string"
                  },
                  "body": {
                    "description": "body of notification",
                    "type": "string"
                  },
                  "image_url": {
                    "description": "absolute url of image if want to send image in notification",
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Logout": {
        "description": "Logout request body",
        "properties": {
          "device_token": {
            "type": "string",
            "description": "device token to stop sending notifications"
          }
        }
      },
      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "description": "something about error",
            "type": "string"
          },
          "errors": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "[object Object]": {
                  "type": "array",
                  "description": "field name which error occured in. (`key` is actualy field name and dynamically would change for each field)",
                  "items": {
                    "type": "string",
                    "description": "something about error"
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}
